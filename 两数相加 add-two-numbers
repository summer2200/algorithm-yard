题目:
leetcode https://leetcode.cn/problems/add-two-numbers/

给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位  数字。
请你将两个数相加，并以相同形式返回一个表示和的链表。
你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

 

示例 1：
输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.

示例 2：
输入：l1 = [0], l2 = [0]
输出：[0]

示例 3：
输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出：[8,9,9,9,0,0,0,1]
 

提示：

每个链表中的节点数在范围 [1, 100] 内
0 <= Node.val <= 9
题目数据保证列表表示的数字不含前导零

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
    // 分别将l1 l2的头部相加, 存储到新的链表, 记住当前的和是否进位
    // 进位的话相加时多加1
    // 最后输出结果链表

    let sum = new ListNode('0'); // 新链表的头
    let head = sum; // 新链表的尾部
    let carry = 0;

    while (l1 || l2 || carry) {
        let val1 = l1 !== null ? l1.val : 0;
        let val2 = l2 !== null ? l2.val : 0;

        let rl = val1 + val2 + carry;
        carry = rl > 10 ? 1 : 0;
        sum.next = new ListNode(rl % 10);
        sum = sum.next; //指向下一个节点, 位置挪动的方式
        if(l1) l1 = l1.next;
        if(l2) l2 = l2.next;
    }
    return head.next;

};

不会做的原因:
没有弄明白链表如何新建
不懂如何移动向下一个节点
不懂如何输出整个链表
